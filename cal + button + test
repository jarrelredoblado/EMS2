#include <LiquidCrystal_I2C.h>

// Initialize LCD (16x2) with I2C address 0x27
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Pin definitions
#define X_PIN A0
#define Y_PIN A1
#define Z_PIN A2
#define ST_PIN 13
#define BUTTON_PIN 2

// Self-test constants
float SENSITIVITY = 300.0;    // mV/g at Vs = 3V
const float V_REF = 5000.0;   // Arduino ADC reference voltage (mV)
float V_ZERO_G_X = 1074.0;    // From -1.42g
float V_ZERO_G_Y = 1065.0;    // From -1.45g
float V_ZERO_G_Z = 1290.0;    // From -0.70g
const int ADC_RESOLUTION = 1024;

// Calibration variables
volatile bool calibrateFlag = false;
unsigned long lastDebounceTime = 0;
const int DEBOUNCE_DELAY = 50;
const int CALIBRATION_DELAY = 2000;
struct AxisCalibration {
    float xPlus, xMinus;
    float yPlus, yMinus;
    float zPlus, zMinus;
} calData;

// Function prototypes
float readAcceleration(int pin, float vZeroG);
bool checkSelfTest(float xDiffG, float yDiffG, float zDiffG);
void displayLCD(String line1, String line2 = "");
float readAxisAverage(int pin, int samples = 10);

void setup() {
    // Initialize Serial
    Serial.begin(9600);

    // Initialize pins
    pinMode(ST_PIN, OUTPUT);
    pinMode(BUTTON_PIN, INPUT_PULLUP);
    digitalWrite(ST_PIN, LOW);

    // Initialize LCD
    lcd.init();
    lcd.backlight();
    displayLCD("System Starting");

    // Run self-test at startup
    displayLCD("Self-Test", "Running...");
    delay(1000);
    bool testResult = runSelfTest();
    displayLCD("Self-Test", testResult ? "PASSED" : "FAILED");
    delay(2000);

    // Attach interrupt for calibration button
    attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), buttonISR, FALLING);
    displayLCD("System Ready", "Press to Calib");
}

void loop() {
    if (calibrateFlag) {
        calibrateAccelerometer();
        calibrateFlag = false;
        displayLCD("System Ready", "Press to Calib");
    }

    // Read and display real-time values
    float xAcc = readAcceleration(X_PIN, V_ZERO_G_X);
    float yAcc = readAcceleration(Y_PIN, V_ZERO_G_Y);
    float zAcc = readAcceleration(Z_PIN, V_ZERO_G_Z);

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("X:");
    lcd.print(xAcc, 2);
    lcd.setCursor(8, 0);
    lcd.print("Y:");
    lcd.print(yAcc, 2);
    lcd.setCursor(0, 1);
    lcd.print("Z:");
    lcd.print(zAcc, 2);

    Serial.print("X: ");
    Serial.print(xAcc, 2);
    Serial.print(" | Y: ");
    Serial.print(yAcc, 2);
    Serial.print(" | Z: ");
    Serial.println(zAcc, 2);

    delay(100);
}

// Button interrupt service routine
void buttonISR() {
    unsigned long currentTime = millis();
    if (currentTime - lastDebounceTime > DEBOUNCE_DELAY) {
        calibrateFlag = true;
        lastDebounceTime = currentTime;
    }
}

// Self-test function
bool runSelfTest() {
    digitalWrite(ST_PIN, LOW);
    delay(100);
    float xBaseline = readAcceleration(X_PIN, V_ZERO_G_X);
    float yBaseline = readAcceleration(Y_PIN, V_ZERO_G_Y);
    float zBaseline = readAcceleration(Z_PIN, V_ZERO_G_Z);

    digitalWrite(ST_PIN, HIGH);
    delay(100);
    float xTest = readAcceleration(X_PIN, V_ZERO_G_X);
    float yTest = readAcceleration(Y_PIN, V_ZERO_G_Y);
    float zTest = readAcceleration(Z_PIN, V_ZERO_G_Z);

    float xDiffG = xTest - xBaseline;
    float yDiffG = yTest - yBaseline;
    float zDiffG = zTest - zBaseline;

    digitalWrite(ST_PIN, LOW);

    Serial.print("Self-Test Differences (g): X=");
    Serial.print(xDiffG, 2);
    Serial.print(" Y=");
    Serial.print(yDiffG, 2);
    Serial.print(" Z=");
    Serial.println(zDiffG, 2);

    return checkSelfTest(xDiffG, yDiffG, zDiffG);
}

// Check self-test ranges
bool checkSelfTest(float xDiffG, float yDiffG, float zDiffG) {
    const float X_MIN_G = -2.0;  const float X_MAX_G = -0.5;
    const float Y_MIN_G = 0.5;   const float Y_MAX_G = 2.0;
    const float Z_MIN_G = 0.5;   const float Z_MAX_G = 3.33;

    return (xDiffG >= X_MAX_G && xDiffG <= X_MIN_G &&
            yDiffG >= Y_MIN_G && yDiffG <= Y_MAX_G &&
            zDiffG >= Z_MIN_G && zDiffG <= Z_MAX_G);
}

// Read acceleration in g
float readAcceleration(int pin, float vZeroG) {
    int rawValue = analogRead(pin);
    float voltage = (rawValue * V_REF) / (ADC_RESOLUTION - 1);
    return (voltage - vZeroG) / SENSITIVITY;
}

// Calibration routine
void calibrateAccelerometer() {
    displayLCD("Calibration", "in 2 seconds");
    delay(CALIBRATION_DELAY);

    String orientations[6] = {"+X up", "-X up", "+Y up", "-Y up", "+Z up", "-Z up"};
    float readings[6];

    for (int i = 0; i < 6; i++) {
        displayLCD("Position:", orientations[i]);
        delay(2000);

        switch(i) {
            case 0: readings[i] = readAxisAverage(X_PIN); break;
            case 1: readings[i] = readAxisAverage(X_PIN); break;
            case 2: readings[i] = readAxisAverage(Y_PIN); break;
            case 3: readings[i] = readAxisAverage(Y_PIN); break;
            case 4: readings[i] = readAxisAverage(Z_PIN); break;
            case 5: readings[i] = readAxisAverage(Z_PIN); break;
        }

        displayLCD(orientations[i], String(readings[i], 2) + "V");
        Serial.print(orientations[i]);
        Serial.print(": ");
        Serial.print(readings[i], 2);
        Serial.println("V");
        delay(1000);
    }

    calData.xPlus = readings[0]; calData.xMinus = readings[1];
    calData.yPlus = readings[2]; calData.yMinus = readings[3];
    calData.zPlus = readings[4]; calData.zMinus = readings[5];

    displayLCD("Calibration", "Complete");
    Serial.println("Calibration Complete");
    delay(2000);
}

// Read average voltage
float readAxisAverage(int pin, int samples = 10) {
    long sum = 0;
    for (int i = 0; i < samples; i++) {
        sum += analogRead(pin);
        delay(10);
    }
    return (float)sum / samples * (V_REF / (ADC_RESOLUTION - 1));
}

// Display on LCD and Serial
void displayLCD(String line1, String line2) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(line1);
    if (line2 != "") {
        lcd.setCursor(0, 1);
        lcd.print(line2);
    }

    Serial.println(line1);
    if (line2 != "") {
        Serial.println(line2);
    }
}
