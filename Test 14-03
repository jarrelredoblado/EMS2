#include <LiquidCrystal_I2C.h>

// Initialize the LCD (16x2) with I2C address 0x27
LiquidCrystal_I2C lcd(0x27, 16, 2);

//button is pin 4


// Self-Test Function
bool selfTestAccelerometer() {
    displayLCD("Self-Test", "Running...");
    delay(1000);

    digitalWrite(ST_PIN, HIGH); // Enable self-test
    delay(100);
    
    float xTest = readAxisAverage(X_PIN);
    float yTest = readAxisAverage(Y_PIN);
    float zTest = readAxisAverage(Z_PIN);
    
    digitalWrite(ST_PIN, LOW); // Disable self-test

    // Verify self-test (expected changes based on ADXL335 datasheet)
    bool testPass = abs(xTest - calData.xPlus - (-0.325)) < 0.1 &&
                    abs(yTest - calData.yPlus - 0.325) < 0.1 &&
                    abs(zTest - calData.zPlus - 0.550) < 0.1;

    if (testPass) {
        displayLCD("Self-Test", "Passed");
        delay(2000);
        return true;
    } else {
        displayLCD("Self-Test", "Failed");
        delay(2000);
        return false;
    }
}

// Calibration routine
void calibrateAccelerometer() {
    displayLCD("Calibration", "Press button");
    delay(1000);

    // Run Self-Test First
    bool selfTestResult = selfTestAccelerometer();
    if (!selfTestResult) {
        displayLCD("Self-Test", "Check Sensor!");
        return; // Stop calibration if self-test fails
    }

    String orientations[6] = {
        "+X up",
        "-X up",
        "+Y up",
        "-Y up",
        "+Z up",
        "-Z up"
    };
    
    float readings[6];

    // Disable interrupt during calibration
    detachInterrupt(digitalPinToInterrupt(BUTTON_PIN));

    for (int i = 0; i < 6; i++) {
        displayLCD("Position:", orientations[i]);
        waitForButtonPress(); // Wait for user input before measuring
        
        switch(i) {
            case 0: readings[i] = readAxisAverage(X_PIN); break;
            case 1: readings[i] = readAxisAverage(X_PIN); break;
            case 2: readings[i] = readAxisAverage(Y_PIN); break;
            case 3: readings[i] = readAxisAverage(Y_PIN); break;
            case 4: readings[i] = readAxisAverage(Z_PIN); break;
            case 5: readings[i] = readAxisAverage(Z_PIN); break;
        }
        
        displayLCD(orientations[i], String(readings[i], 3) + "V");
        waitForButtonPress(); // Wait for user to confirm before proceeding
    }

    // Store calibration data
    calData.xPlus = readings[0];
    calData.xMinus = readings[1];
    calData.yPlus = readings[2];
    calData.yMinus = readings[3];
    calData.zPlus = readings[4];
    calData.zMinus = readings[5];

    displayLCD("Calibration", "Complete");
    delay(2000);

    // Re-enable interrupt after calibration
    attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), buttonISR, FALLING);
}


void setup() {
  Serial.begin(9600);  // Set Serial Monitor to 9600 baud

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  
  // Print initial text on LCD
  lcd.setCursor(0, 0);
  lcd.print("ADXL Values:");

  // Calibrate accelerometer
  calibrate();
}


oid loop() {
  if (!key) {
    calibrate();
    key = true;
  } else {
    // Read values from ADXL335
    Xread = analogRead(X_PIN);
    Yread = analogRead(Y_PIN);
    Zread = analogRead(Z_PIN);

    // Convert to acceleration (m/sÂ²)
    x_acc = ((Xread - X_calib) * 9.81) / 330.0;
    y_acc = ((Yread - Y_calib) * 9.81) / 330.0;
    z_acc = ((Zread - Z_calib) * 9.81) / 330.0;

    // Print values to Serial Monitor (for debugging)
    Serial.print("X: "); Serial.print(x_acc, 2);
    Serial.print(" | Y: "); Serial.print(y_acc, 2);
    Serial.print(" | Z: "); Serial.println(z_acc, 2);

    // Display values on LCD
    lcd.setCursor(0, 1);
    lcd.print("X:");
    lcd.setCursor(2, 1);
    lcd.print(x_acc, 2);
    lcd.print("  "); // Extra spaces to clear old data

    lcd.setCursor(8, 1);
    lcd.print("Y:");
    lcd.setCursor(10, 1);
    lcd.print(y_acc, 2);
    lcd.print("  ");

    lcd.setCursor(0, 2);
    lcd.print("Z:");
    lcd.setCursor(2, 2);
    lcd.print(z_acc, 2);
    lcd.print("  ");

    delay(100);
  }
}

void calibrate() {
  long X_sum = 0, Y_sum = 0, Z_sum = 0;

  // Take multiple readings for averaging
  for (int i = 0; i < readings; i++) {
    X_sum += analogRead(X_PIN);
    Y_sum += analogRead(Y_PIN);
    Z_sum += analogRead(Z_PIN);
    delay(1);
  }

  // Store calibration offsets
  X_calib = X_sum / readings;
  Y_calib = Y_sum / readings;
  Z_calib = Z_sum / readings;

  Serial.println("Calibration Done:");
  Serial.print("X: "); Serial.print(X_calib);
  Serial.print(" | Y: "); Serial.print(Y_calib);
  Serial.print(" | Z: "); Serial.println(Z_calib);
}


