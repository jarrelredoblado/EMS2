  // Sensitivity of ADXL335 at Vs = 3V (mV/g) - Assuming typical
float SENSITIVITY = 300.0;  
  // Arduino ADC reference voltage (mV)
const float V_REF = 5000.0;       
  // Recalibrated zero-g voltages based on readings (mV)
float V_ZERO_G_X = 1074.0; 
float V_ZERO_G_Y = 1065.0;
float V_ZERO_G_Z = 1290.0; 
  // ADC resolution (bits)
const int ADC_RESOLUTION = 1024;
  // Tolerance for static check (g)
const float STATIC_TOLERANCE = 0.2;
  // Threshold beyond which a step is detected (based on testing)
float stepThreshold = 9.0; 

  // Define baselines
float xBaseline = 0, yBaseline = 0, zBaseline = 0;
  // Setup initial values for variables
int stepCount = 0;
bool stepDetected = false;
float previousAcceleration = 0;

// ADXL335 Self-Test Routine with Recalibrated Zero-g and Flat Orientation
#define X_PIN A0    // X-axis output
#define Y_PIN A1    // Y-axis output
#define Z_PIN A2    // Z-axis output
#define ST_PIN 2    // Self-test pin
#define buttonPin = 2 // Button pin

bool systemState = 0; // Set initial system state

void setup() {
  Serial.begin(9600);

    // ST Pin initial state; high signal provides 5V to MOSFET gate
  pinMode(ST_PIN, OUTPUT);
  digitalWrite(ST_PIN, HIGH);

    // Initialise arduino pins for ADXL readings
  digitalWrite(X_PIN,INPUT);
  digitalWrite(Y_PIN,INPUT);
  digitalWrite(Z_PIN,INPUT);

    // Set button pin to INPUT for reading
  digitalWrite(buttonPin,INPUT);

    // Calibrate sensor while static to calculate accurate baseline
  for (int i = 0; i < 100; i++) {
      xBaseline += analogRead(xPin);
      yBaseline += analogRead(yPin);
      zBaseline += analogRead(zPin);
      delay(10);
  }
    // Divide baseline by 100; calculates realistic static baseline with hardware inaccuracies
  xBaseline /= 100.0;
  yBaseline /= 100.0;
  zBaseline /= 100.0;
}

void loop() {
  switch(systemState){

      // Normal Step Tracking
    case(0){
        // Checks button input to change to ST function
      if (digitalRead(buttonPin) == 1){
        systemState++;
      }

        // Read raw accelerometer values
      int rawX = analogRead(xPin);
      int rawY = analogRead(yPin);
      int rawZ = analogRead(zPin);

        // Convert raw ADC values to acceleration (m/sÂ²)
      float aX = (rawX - xBaseline) * (3.3 / 1023.0) * 10;
      float aY = (rawY - yBaseline) * (3.3 / 1023.0) * 10;
      float aZ = (rawZ - zBaseline) * (3.3 / 1023.0) * 10;

        // Compute absolute acceleration
      float aAbs = sqrt(aX * aX + aY * aY + aZ * aZ);

        // Checks for acceleration beyond threshold
      if (filteredAcceleration > stepThreshold && !stepDetected) {
        stepCount++;
        stepDetected = true;
      }

        // stepDetected will remain high until acceleration decreases below 7 (lower threshold)
      if (filteredAcceleration < 7.0) {
          stepDetected = false;
      }
    }

      // Self Test Feature
    case(1){
        // Checks for button press to return to normal step counting functionality
      if (digitalRead(buttonPin) == 1){
        systemState = 0;
      }
        // Set ST pin to LOW, pulls 5V pull up resistor from MOSFET gate to ground;
        // reduces MOSFET impedance and supplying ST pin with 3V
      digitalWrite(ST_PIN, LOW);
      float xTest = readAcceleration(X_PIN, V_ZERO_G_X);
      float yTest = readAcceleration(Y_PIN, V_ZERO_G_Y);
      float zTest = readAcceleration(Z_PIN, V_ZERO_G_Z);
      
        // Calculate differences in g
      float xDiffG = xTest - xBaseline;
      float yDiffG = yTest - yBaseline;
      float zDiffG = zTest - zBaseline;
      float xDiffmV = xDiffG * SENSITIVITY;
      float yDiffmV = yDiffG * SENSITIVITY;
      float zDiffmV = zDiffG * SENSITIVITY;
      
        // Check self-test against datasheet ranges
      if (checkSelfTest(xDiffG, yDiffG, zDiffG, xDiffmV, yDiffmV, zDiffmV)) {
        Serial.println("Self-Test: PASS");
      } 
      else {
        Serial.println("Self-Test: FAIL");
      }
    }
  }
}

float readAcceleration(int pin, float vZeroG) {
  int rawValue = analogRead(pin);
  float voltage = (rawValue * V_REF) / (ADC_RESOLUTION - 1);
  float acceleration = (voltage - vZeroG) / SENSITIVITY;
  return acceleration;
}

bool isStatic(float x, float y, float z) {
  float expectedX = 0.0; // Flat: no gravity
  float expectedY = 0.0;
  float expectedZ = 0.0;
  return (abs(x - expectedX) <= STATIC_TOLERANCE &&
          abs(y - expectedY) <= STATIC_TOLERANCE &&
          abs(z - expectedZ) <= STATIC_TOLERANCE);
}

void printResults(float x, float y, float z) {
  Serial.print("X: "); Serial.print(x, 2); Serial.print(" g");
  Serial.print(" | Y: "); Serial.print(y, 2); Serial.print(" g");
  Serial.print(" | Z: "); Serial.print(z, 2); Serial.println(" g");
}

// Function to check self-test against datasheet ranges
bool checkSelfTest(float xDiffG, float yDiffG, float zDiffG, float xDiffmV, float yDiffmV, float zDiffmV) {
  const float X_MIN_G = -0.5;    const float X_MAX_G = -2.0;
  const float X_MIN_mV = 150.0; const float X_MAX_mV = 600.0;
  const float Y_MIN_G = 0.5;     const float Y_MAX_G = 2.0;
  const float Y_MIN_mV = 150.0;  const float Y_MAX_mV = 600.0;
  const float Z_MIN_G = 0.5;     const float Z_MAX_G = 3.33;
  const float Z_MIN_mV = 150.0;  const float Z_MAX_mV = 1000.0;
  
  return (xDiffG >= X_MAX_G && xDiffG <= X_MIN_G && xDiffmV >= X_MAX_mV && xDiffmV <= X_MIN_mV &&
          yDiffG >= Y_MIN_G && yDiffG <= Y_MAX_G && yDiffmV >= Y_MIN_mV && yDiffmV <= Y_MAX_mV &&
          zDiffG >= Z_MIN_G && zDiffG <= Z_MAX_G && zDiffmV >= Z_MIN_mV && zDiffmV <= Z_MAX_mV);
}
