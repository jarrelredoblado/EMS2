#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// LCD setup: address 0x27, with 16 columns and 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Analog pins connected to X, Y, Z outputs of accelerometer
const int xPin = A0;
const int yPin = A1;
const int zPin = A2;

// Self-test control pin and push button pin
const int ST_PIN = 4;
const int buttonPin = 2;

// Calibration sequence directions and storage
const char* directions[6] = {"+X", "-X", "+Y", "-Y", "+Z", "-Z"};
float calibrationData[6][3];
int calibStep = 0;

// State machine for managing mode transitions
enum State { SELF_TEST, CALIBRATION, STEPS, DEADLIFT };
State currentState = SELF_TEST;

// Button press tracking for debouncing and press detection
bool pressed = false;
unsigned long pressStartTime = 0;
const unsigned long maxPressDuration = 800;

// Debounce tracking
bool lastButtonState = HIGH;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;

// Predefined zero-G voltages (determined via calibration or datasheet)
float ZERO_G_VOLTAGE_X = 2.08;
float ZERO_G_VOLTAGE_Y = 2.47;
float ZERO_G_VOLTAGE_Z = 3.00;

// Accelerometer conversion constants
const float SENSITIVITY = 0.300; // V/g
const float ADC_REF = 5.0;       // 5V reference
const int ADC_MAX = 1023;        // 10-bit ADC

// Step detection thresholds and timing
const float STEP_PEAK_THRESHOLD = 2.0;
const float STEP_VALLEY_THRESHOLD = 1.5;
const int MIN_STEP_INTERVAL = 300; // Minimum time between steps (ms)

// Deadlift detection thresholds
const float DEADLIFT_PEAK_THRESHOLD = 3.0;
const float DEADLIFT_VALLEY_THRESHOLD = 1.5;
bool deadliftUp = false;
int deadliftCount = 0;

// Moving average window setup for magnitude smoothing
const int WINDOW_SIZE = 10;
float magnitudeHistory[WINDOW_SIZE];
int historyIndex = 0;
float magnitudeSum = 0.0;

// Step detection tracking
unsigned long lastStepTime = 0;
int stepCount = 0;
bool stepDetected = false;
unsigned long stepDetectedTime = 0;
const unsigned long STEP_DETECT_TIMEOUT = 1000;

// --- Function Prototypes ---
void waitForButtonPress();
void runSelfTest();
void runCalibration();
void runSteps();
void runDeadlift();
float readAccel(int pin, float zero_g_voltage);
float readAccelMagnitude();
float getSmoothedMagnitude(float newMagnitude);
float readVoltage_mV(int pin);

// --- Setup runs once at startup ---
void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  lcd.clear();

  pinMode(ST_PIN, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);
  digitalWrite(ST_PIN, HIGH);  // Default state for self-test pin

  // Start with self-test
  Serial.println("Starting Self-Test...");
  lcd.setCursor(0, 0); lcd.print("Starting");
  lcd.setCursor(0, 1); lcd.print("Self-Test...");
  delay(2000);
  runSelfTest(); // Moves to CALIBRATION or halts on failure
}

// --- Loop runs repeatedly ---
void loop() {
  static bool buttonWasPressed = false;

  int reading = digitalRead(buttonPin);
  if (reading == LOW && !buttonWasPressed) {
    buttonWasPressed = true;

    // Toggle between STEP and DEADLIFT mode
    if (currentState == STEPS) {
      currentState = DEADLIFT;
    } else if (currentState == DEADLIFT) {
      currentState = STEPS;
    }
    lcd.clear();
    delay(200); // Debounce delay
  } else if (reading == HIGH) {
    buttonWasPressed = false;
  }

  // State-based execution
  switch (currentState) {
    case SELF_TEST: break;
    case CALIBRATION: runCalibration(); break;
    case STEPS: runSteps(); break;
    case DEADLIFT: runDeadlift(); break;
  }
}

// --- Calibration logic with 6 orientations ---
void runCalibration() {
  static bool promptShown = false;

  if (calibStep < 6) {
    if (!promptShown) {
      lcd.clear();
      lcd.setCursor(0, 0); lcd.print("Calib:");
      lcd.print(directions[calibStep]);
      lcd.setCursor(0, 1); lcd.print("Press Btn");
      Serial.print("Place sensor in "); Serial.println(directions[calibStep]);
      promptShown = true;
    }

    waitForButtonPress();

    calibrationData[calibStep][0] = analogRead(xPin);
    calibrationData[calibStep][1] = analogRead(yPin);
    calibrationData[calibStep][2] = analogRead(zPin);

    Serial.print("Calibrated "); Serial.print(directions[calibStep]);
    Serial.print(": X="); Serial.print(calibrationData[calibStep][0]);
    Serial.print(" Y="); Serial.print(calibrationData[calibStep][1]);
    Serial.print(" Z="); Serial.println(calibrationData[calibStep][2]);

    calibStep++;
    promptShown = false;
  } else {
    Serial.println("Calibration complete!");
    lcd.clear();
    lcd.setCursor(0, 0); lcd.print("Calibration");
    lcd.setCursor(0, 1); lcd.print("Complete");
    delay(2000);

    // Initialize smoothing array
    float initMagnitude = readAccelMagnitude();
    for (int i = 0; i < WINDOW_SIZE; i++) magnitudeHistory[i] = initMagnitude;
    magnitudeSum = initMagnitude * WINDOW_SIZE;

    // Reset counters
    stepCount = 0;
    deadliftCount = 0;
    lastStepTime = 0;
    stepDetected = false;
    deadliftUp = false;

    currentState = STEPS;
  }
}

// --- Step detection using smoothed magnitude ---
void runSteps() {
  float ax = readAccel(xPin, ZERO_G_VOLTAGE_X);
  float ay = readAccel(yPin, ZERO_G_VOLTAGE_Y);
  float az = readAccel(zPin, ZERO_G_VOLTAGE_Z);
  float magnitude = sqrt(ax * ax + ay * ay + az * az);
  float smoothed = getSmoothedMagnitude(magnitude);

  unsigned long currentTime = millis();
  static int lastStepCount = 0;
  bool stepsIncreasing = (stepCount > lastStepCount);

  // Detect peak
  if (!stepDetected && smoothed > STEP_PEAK_THRESHOLD && (currentTime - lastStepTime) > MIN_STEP_INTERVAL) {
    stepCount++;
    lastStepTime = currentTime;
    stepDetected = true;
    stepDetectedTime = currentTime;
    Serial.print("Step detected! Total steps: "); Serial.println(stepCount);
  }

  // Reset detection
  if (stepDetected && smoothed < STEP_VALLEY_THRESHOLD) {
    stepDetected = false;
    Serial.println("Step detection reset by valley");
  } else if (stepDetected && (currentTime - stepDetectedTime > STEP_DETECT_TIMEOUT)) {
    stepDetected = false;
    Serial.println("Step detection reset by timeout");
  }

  lastStepCount = stepCount;

  // Basic pace estimation
  String pace = "";
  if (ax > 2.5 || ay > 2.1) pace = "Running";
  else if (stepsIncreasing || smoothed > 2.0) pace = "Walking";
  else pace = "Stationary";

  // Display on LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Steps:");
  lcd.print(stepCount);
  lcd.print(" Sm:");
  lcd.print(smoothed, 2);
  lcd.setCursor(0, 1);
  lcd.print("Pace:");
  lcd.print(pace);

  delay(100);
}

// --- Deadlift rep detection using Z-axis acceleration ---
void runDeadlift() {
  float az = readAccel(zPin, ZERO_G_VOLTAGE_Z);
  float smoothedZ = getSmoothedMagnitude(abs(az));

  // Detect upward lift
  if (!deadliftUp && smoothedZ > DEADLIFT_PEAK_THRESHOLD) {
    deadliftUp = true;
    Serial.println("Deadlift UP detected");
  }

  // Detect lowering back down
  if (deadliftUp && smoothedZ < DEADLIFT_VALLEY_THRESHOLD) {
    deadliftUp = false;
    deadliftCount++;
    Serial.print("Deadlift rep detected. Count: ");
    Serial.println(deadliftCount);
  }

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Deadlift Reps:");
  lcd.print(deadliftCount);
  lcd.setCursor(0, 1);
  lcd.print("Z:");
  lcd.print(smoothedZ, 2);

  delay(100);
}

// --- Blocking wait for button press to continue ---
void waitForButtonPress() {
  Serial.println("Waiting for button press...");
  pressed = false;

  while (!pressed) {
    int state = digitalRead(buttonPin);
    if (!pressed && state == HIGH) {
      pressed = true;
      pressStartTime = millis();
      Serial.println("Button Pressed!");
    }
    if (pressed && (state == LOW || millis() - pressStartTime >= maxPressDuration)) {
      pressed = false;
      Serial.println("Button Released / Timeout");
      delay(50);
      break;
    }
    delay(20);
  }
}

// --- ADXL335 Self-Test routine ---
void runSelfTest() {
  float x_initial = readVoltage_mV(xPin);
  float y_initial = readVoltage_mV(yPin);
  float z_initial = readVoltage_mV(zPin);

  digitalWrite(ST_PIN, LOW); // Activate self-test
  delay(500);

  float x_test = readVoltage_mV(xPin);
  float y_test = readVoltage_mV(yPin);
  float z_test = readVoltage_mV(zPin);

  digitalWrite(ST_PIN, HIGH); // Deactivate self-test

  float deltaX = x_test - x_initial;
  float deltaY = y_test - y_initial;
  float deltaZ = z_test - z_initial;

  // Expected response ranges from datasheet
  bool pass =
    (abs(deltaX + 325.0) < 225.0) &&
    (abs(deltaY - 325.0) < 225.0) &&
    (abs(deltaZ - 550.0) < 425.0);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Self-Test");

  if (pass) {
    Serial.println("Self-Test Passed");
    lcd.setCursor(0, 1);
    lcd.print("Passed");
    delay(3000);
    currentState = CALIBRATION;
  } else {
    Serial.println("Self-Test Failed");
    lcd.setCursor(0, 1);
    lcd.print("Failed");
    while (true) delay(1000); // Lock system
  }
}

// --- Analog read to millivolts ---
float readVoltage_mV(int pin) {
  int raw = analogRead(pin);
  float voltage = (raw * ADC_REF) / ADC_MAX;
  return voltage * 1000.0;
}

// --- Convert raw reading to g force ---
float readAccel(int pin, float zero_g_voltage) {
  int raw = analogRead(pin);
  float voltage = (raw * ADC_REF) / ADC_MAX;
  return (voltage - zero_g_voltage) / SENSITIVITY;
}

// --- Vector magnitude from all 3 axes ---
float readAccelMagnitude() {
  float ax = readAccel(xPin, ZERO_G_VOLTAGE_X);
  float ay = readAccel(yPin, ZERO_G_VOLTAGE_Y);
  float az = readAccel(zPin, ZERO_G_VOLTAGE_Z);
  return sqrt(ax * ax + ay * ay + az * az);
}

// --- Moving average smoothing filter ---
float getSmoothedMagnitude(float newMagnitude) {
  magnitudeSum -= magnitudeHistory[historyIndex];
  magnitudeHistory[historyIndex] = newMagnitude;
  magnitudeSum += newMagnitude;
  historyIndex = (historyIndex + 1) % WINDOW_SIZE;
  return magnitudeSum / WINDOW_SIZE;
}

#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// LCD setup: address 0x27, with 16 columns and 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Analog pins connected to X, Y, Z outputs of accelerometer
const int xPin = A0;
const int yPin = A1;
const int zPin = A2;

// Self-test control pin and push button pin
const int ST_PIN = 4;
const int buttonPin = 2;

// Calibration sequence directions and storage
const char* directions[6] = {"+X", "-X", "+Y", "-Y", "+Z", "-Z"};
float calibrationData[6][3];
int calibStep = 0;

// State machine for managing mode transitions
enum State { SELF_TEST, CALIBRATION, STEPS, DEADLIFT };
State currentState = SELF_TEST;

// Button press tracking for debouncing and press detection
bool pressed = false;
unsigned long pressStartTime = 0;
const unsigned long maxPressDuration = 800;

// Debounce tracking
bool lastButtonState = HIGH;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;

// Predefined zero-G voltages (determined via calibration or datasheet)
float ZERO_G_VOLTAGE_X = 2.08;
float ZERO_G_VOLTAGE_Y = 2.47;
float ZERO_G_VOLTAGE_Z = 3.00;

// Accelerometer conversion constants
const float SENSITIVITY = 0.300; // V/g
const float ADC_REF = 5.0;       // 5V reference
const int ADC_MAX = 1023;        // 10-bit ADC

// Step detection thresholds and timing
const float STEP_PEAK_THRESHOLD = 2.0;
const float STEP_VALLEY_THRESHOLD = 1.5;
const int MIN_STEP_INTERVAL = 300; // Minimum time between steps (ms)

// Deadlift detection thresholds
const float DEADLIFT_PEAK_THRESHOLD = 3.0;
const float DEADLIFT_VALLEY_THRESHOLD = 1.5;
bool deadliftUp = false;
int deadliftCount = 0;

// Moving average window setup for magnitude smoothing
const int WINDOW_SIZE = 10;
float magnitudeHistory[WINDOW_SIZE];
int historyIndex = 0;
float magnitudeSum = 0.0;

// Step detection tracking
unsigned long lastStepTime = 0;
int stepCount = 0;
bool stepDetected = false;
unsigned long stepDetectedTime = 0;
const unsigned long STEP_DETECT_TIMEOUT = 1000;

// --- Function Prototypes ---
void waitForButtonPress();
void runSelfTest();
void runCalibration();
void runSteps();
void runDeadlift();
float readAccel(int pin, float zero_g_voltage);
float readAccelMagnitude();
float getSmoothedMagnitude(float newMagnitude);
float readVoltage_mV(int pin);

// --- Setup runs once at startup ---
void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  lcd.clear();

  pinMode(ST_PIN, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);
  digitalWrite(ST_PIN, HIGH);  // Default state for self-test pin

  // Start with self-test
  Serial.println("Starting Self-Test...");
  lcd.setCursor(0, 0); lcd.print("Starting");
  lcd.setCursor(0, 1); lcd.print("Self-Test...");
  delay(2000);
  runSelfTest(); // Moves to CALIBRATION or halts on failure
}

// --- Loop runs repeatedly ---
void loop() {
  static bool buttonWasPressed = false;

  int reading = digitalRead(buttonPin);
  if (reading == LOW && !buttonWasPressed) {
    buttonWasPressed = true;

    // Toggle between STEP and DEADLIFT mode
    if (currentState == STEPS) {
      currentState = DEADLIFT;
    } else if (currentState == DEADLIFT) {
      currentState = STEPS;
    }
    lcd.clear();
    delay(200); // Debounce delay
  } else if (reading == HIGH) {
    buttonWasPressed = false;
  }

  // State-based execution
  switch (currentState) {
    case SELF_TEST: break;
    case CALIBRATION: runCalibration(); break;
    case STEPS: runSteps(); break;
    case DEADLIFT: runDeadlift(); break;
  }
}

// --- Calibration logic with 6 orientations ---
void runCalibration() {
  static bool promptShown = false;

  if (calibStep < 6) {
    if (!promptShown) {
      lcd.clear();
      lcd.setCursor(0, 0); lcd.print("Calib:");
      lcd.print(directions[calibStep]);
      lcd.setCursor(0, 1); lcd.print("Press Btn");
      Serial.print("Place sensor in "); Serial.println(directions[calibStep]);
      promptShown = true;
    }

    waitForButtonPress();

    calibrationData[calibStep][0] = analogRead(xPin);
    calibrationData[calibStep][1] = analogRead(yPin);
    calibrationData[calibStep][2] = analogRead(zPin);

    Serial.print("Calibrated "); Serial.print(directions[calibStep]);
    Serial.print(": X="); Serial.print(calibrationData[calibStep][0]);
    Serial.print(" Y="); Serial.print(calibrationData[calibStep][1]);
    Serial.print(" Z="); Serial.println(calibrationData[calibStep][2]);

    calibStep++;
    promptShown = false;
  } else {
    Serial.println("Calibration complete!");
    lcd.clear();
    lcd.setCursor(0, 0); lcd.print("Calibration");
    lcd.setCursor(0, 1); lcd.print("Complete");
    delay(2000);

    // Initialize smoothing array
    float initMagnitude = readAccelMagnitude();
    for (int i = 0; i < WINDOW_SIZE; i++) magnitudeHistory[i] = initMagnitude;
    magnitudeSum = initMagnitude * WINDOW_SIZE;

    // Reset counters
    stepCount = 0;
    deadliftCount = 0;
    lastStepTime = 0;
    stepDetected = false;
    deadliftUp = false;

    currentState = STEPS;
  }
}

// --- Step detection using smoothed magnitude ---
void runSteps() {
  float ax = readAccel(xPin, ZERO_G_VOLTAGE_X);
  float ay = readAccel(yPin, ZERO_G_VOLTAGE_Y);
  float az = readAccel(zPin, ZERO_G_VOLTAGE_Z);
  float magnitude = sqrt(ax * ax + ay * ay + az * az);
  float smoothed = getSmoothedMagnitude(magnitude);

  unsigned long currentTime = millis();
  static int lastStepCount = 0;
  bool stepsIncreasing = (stepCount > lastStepCount);

  // Detect peak
  if (!stepDetected && smoothed > STEP_PEAK_THRESHOLD && (currentTime - lastStepTime) > MIN_STEP_INTERVAL) {
    stepCount++;
    lastStepTime = currentTime;
    stepDetected = true;
    stepDetectedTime = currentTime;
    Serial.print("Step detected! Total steps: "); Serial.println(stepCount);
  }

  // Reset detection
  if (stepDetected && smoothed < STEP_VALLEY_THRESHOLD) {
    stepDetected = false;
    Serial.println("Step detection reset by valley");
  } else if (stepDetected && (currentTime - stepDetectedTime > STEP_DETECT_TIMEOUT)) {
    stepDetected = false;
    Serial.println("Step detection reset by timeout");
  }

  lastStepCount = stepCount;

  // Basic pace estimation
  String pace = "";
  if (ax > 2.5 || ay > 2.1) pace = "Running";
  else if (stepsIncreasing || smoothed > 2.0) pace = "Walking";
  else pace = "Stationary";

  // Display on LCD
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Steps:");
  lcd.print(stepCount);
  lcd.print(" Sm:");
  lcd.print(smoothed, 2);
  lcd.setCursor(0, 1);
  lcd.print("Pace:");
  lcd.print(pace);

  delay(100);
}

// --- Deadlift rep detection using Z-axis acceleration ---
void runDeadlift() {
  float az = readAccel(zPin, ZERO_G_VOLTAGE_Z);
  float smoothedZ = getSmoothedMagnitude(abs(az));

  // Detect upward lift
  if (!deadliftUp && smoothedZ > DEADLIFT_PEAK_THRESHOLD) {
    deadliftUp = true;
    Serial.println("Deadlift UP detected");
  }

  // Detect lowering back down
  if (deadliftUp && smoothedZ < DEADLIFT_VALLEY_THRESHOLD) {
    deadliftUp = false;
    deadliftCount++;
    Serial.print("Deadlift rep detected. Count: ");
    Serial.println(deadliftCount);
  }

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Deadlift Reps:");
  lcd.print(deadliftCount);
  lcd.setCursor(0, 1);
  lcd.print("Z:");
  lcd.print(smoothedZ, 2);

  delay(100);
}

// --- Blocking wait for button press to continue ---
void waitForButtonPress() {
  Serial.println("Waiting for button press...");
  pressed = false;

  while (!pressed) {
    int state = digitalRead(buttonPin);
    if (!pressed && state == HIGH) {
      pressed = true;
      pressStartTime = millis();
      Serial.println("Button Pressed!");
    }
    if (pressed && (state == LOW || millis() - pressStartTime >= maxPressDuration)) {
      pressed = false;
      Serial.println("Button Released / Timeout");
      delay(50);
      break;
    }
    delay(20);
  }
}

// --- ADXL335 Self-Test routine ---
void runSelfTest() {
  float x_initial = readVoltage_mV(xPin);
  float y_initial = readVoltage_mV(yPin);
  float z_initial = readVoltage_mV(zPin);

  digitalWrite(ST_PIN, LOW); // Activate self-test
  delay(500);

  float x_test = readVoltage_mV(xPin);
  float y_test = readVoltage_mV(yPin);
  float z_test = readVoltage_mV(zPin);

  digitalWrite(ST_PIN, HIGH); // Deactivate self-test

  float deltaX = x_test - x_initial;
  float deltaY = y_test - y_initial;
  float deltaZ = z_test - z_initial;

  // Expected response ranges from datasheet
  bool pass =
    (abs(deltaX + 325.0) < 225.0) &&
    (abs(deltaY - 325.0) < 225.0) &&
    (abs(deltaZ - 550.0) < 425.0);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Self-Test");

  if (pass) {
    Serial.println("Self-Test Passed");
    lcd.setCursor(0, 1);
    lcd.print("Passed");
    delay(3000);
    currentState = CALIBRATION;
  } else {
    Serial.println("Self-Test Failed");
    lcd.setCursor(0, 1);
    lcd.print("Failed");
    while (true) delay(1000); // Lock system
  }
}

// --- Analog read to millivolts ---
float readVoltage_mV(int pin) {
  int raw = analogRead(pin);
  float voltage = (raw * ADC_REF) / ADC_MAX;
  return voltage * 1000.0;
}

// --- Convert raw reading to g force ---
float readAccel(int pin, float zero_g_voltage) {
  int raw = analogRead(pin);
  float voltage = (raw * ADC_REF) / ADC_MAX;
  return (voltage - zero_g_voltage) / SENSITIVITY;
}

// --- Vector magnitude from all 3 axes ---
float readAccelMagnitude() {
  float ax = readAccel(xPin, ZERO_G_VOLTAGE_X);
  float ay = readAccel(yPin, ZERO_G_VOLTAGE_Y);
  float az = readAccel(zPin, ZERO_G_VOLTAGE_Z);
  return sqrt(ax * ax + ay * ay + az * az);
}

// --- Moving average smoothing filter ---
float getSmoothedMagnitude(float newMagnitude) {
  magnitudeSum -= magnitudeHistory[historyIndex];
  magnitudeHistory[historyIndex] = newMagnitude;
  magnitudeSum += newMagnitude;
  historyIndex = (historyIndex + 1) % WINDOW_SIZE;
  return magnitudeSum / WINDOW_SIZE;
}

