#include <LiquidCrystal_I2C.h>

// LCD setup: address 0x27, 16 columns, 2 rows
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Pins
#define X_PIN A0
#define Y_PIN A1
#define Z_PIN A2
#define ST_PIN 13
#define BUTTON_PIN 4

// Constants
const float V_REF = 3300.0;
const int ADC_RESOLUTION = 1024;
const float OFFSET_VOLTAGE = 1.65;
const float SENSITIVITY = 0.3;
const unsigned long debounceDelay = 50;

// Calibration offsets
float xOffset = 0.0;
float yOffset = 0.0;
float zOffset = 0.0;

int axisIndex = 0;
bool isCalibrated[3] = {false, false, false};

int buttonState = HIGH;
int lastButtonState = HIGH;
unsigned long lastDebounceTime = 0;

// Helper functions
float readVoltage(int pin) {
  int raw = analogRead(pin);
  return (raw * V_REF) / (ADC_RESOLUTION - 1);
}

float convertToAcceleration(float voltage) {
  return (voltage - OFFSET_VOLTAGE) / SENSITIVITY;
}

bool allCalibrated() {
  return isCalibrated[0] && isCalibrated[1] && isCalibrated[2];
}

void printAxisName(int axis) {
  if (axis == 0) Serial.println("➡️ Next: X axis");
  else if (axis == 1) Serial.println("➡️ Next: Y axis");
  else if (axis == 2) Serial.println("➡️ Next: Z axis");
}

// Self-test
bool checkPass(float measured, float expected) {
  float absExpected = abs(expected);
  float min = expected < 0 ? -absExpected * 1.25 : absExpected * 0.75;
  float max = expected < 0 ? -absExpected * 0.75 : absExpected * 1.25;
  return measured >= min && measured <= max;
}

void runSelfTest() {
  const float X_TYP_mV = -325.0;
  const float Y_TYP_mV = 325.0;
  const float Z_TYP_mV = 550.0;

  digitalWrite(ST_PIN, LOW);
  delay(100);
  float xBase = readVoltage(X_PIN);
  float yBase = readVoltage(Y_PIN);
  float zBase = readVoltage(Z_PIN);

  digitalWrite(ST_PIN, HIGH);
  delay(100);
  float xST = readVoltage(X_PIN);
  float yST = readVoltage(Y_PIN);
  float zST = readVoltage(Z_PIN);

  float dx = xST - xBase;
  float dy = yST - yBase;
  float dz = zST - zBase;

  bool xPass = checkPass(dx, X_TYP_mV);
  bool yPass = checkPass(dy, Y_TYP_mV);
  bool zPass = checkPass(dz, Z_TYP_mV);

  if (xPass && yPass && zPass) {
    Serial.println("✅ Self-test passed");
  } else {
    Serial.println("❌ Self-test failed.");
  }

  digitalWrite(ST_PIN, LOW);
}

// Axis calibration
void calibrateAxis(int axis) {
  switch (axis) {
    case 0:
      Serial.println("Calibrating X axis... Place +X then press button.");
      xOffset = readVoltage(X_PIN);
      Serial.println("Now place -X and press button.");
      xOffset = (xOffset + readVoltage(X_PIN)) / 2;
      Serial.print("✅ X offset: "); Serial.println(xOffset);
      break;
    case 1:
      Serial.println("Calibrating Y axis... Place +Y then press button.");
      yOffset = readVoltage(Y_PIN);
      Serial.println("Now place -Y and press button.");
      yOffset = (yOffset + readVoltage(Y_PIN)) / 2;
      Serial.print("✅ Y offset: "); Serial.println(yOffset);
      break;
    case 2:
      Serial.println("Calibrating Z axis... Place +Z then press button.");
      zOffset = readVoltage(Z_PIN);
      Serial.println("Now place -Z and press button.");
      zOffset = (zOffset + readVoltage(Z_PIN)) / 2;
      Serial.print("✅ Z offset: "); Serial.println(zOffset);
      break;
  }
  isCalibrated[axis] = true;
}

// Setup
void setup() {
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(ST_PIN, OUTPUT);
  digitalWrite(ST_PIN, LOW);

  analogReference(AR_EXTERNAL);

  Serial.begin(9600);
  delay(400);
  lcd.init();
  lcd.backlight();

  lcd.setCursor(0, 0);
  lcd.print("System Init...");

  Serial.println("System Ready");
  runSelfTest();

  Serial.println("Press button to start calibration");
  printAxisName(axisIndex);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Calibrating...");
  lcd.setCursor(0, 1);
  lcd.print("Axis: X");
}

// Main loop
void loop() {
  int reading = digitalRead(BUTTON_PIN);

  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading == LOW && buttonState == HIGH) {
      calibrateAxis(axisIndex);
      axisIndex = (axisIndex + 1) % 3;

      if (axisIndex == 0 && allCalibrated()) {
        Serial.println("✅ All axes calibrated!");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Calib Done!");
        delay(1000);
      } else {
        printAxisName(axisIndex);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Calibrating...");
        lcd.setCursor(0, 1);
        lcd.print("Axis: ");
        if (axisIndex == 0) lcd.print("X");
        if (axisIndex == 1) lcd.print("Y");
        if (axisIndex == 2) lcd.print("Z");
      }

      buttonState = LOW;
    } else if (reading == HIGH) {
      buttonState = HIGH;
    }
  }

  lastButtonState = reading;

  if (!allCalibrated()) return;

  float x = convertToAcceleration(readVoltage(X_PIN) - xOffset);
  float y = convertToAcceleration(readVoltage(Y_PIN) - yOffset);
  float z = convertToAcceleration(readVoltage(Z_PIN) - zOffset);

  Serial.print("X: ");
  Serial.print(x, 2);
  Serial.print(" g | Y: ");
  Serial.print(y, 2);
  Serial.print(" g | Z: ");
  Serial.println(z, 2);

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("X:");
  lcd.print(x, 2);
  lcd.print(" Y:");
  lcd.print(y, 2);
  lcd.setCursor(0, 1);
  lcd.print("Z:");
  lcd.print(z, 2);

  delay(400);
}
