  // Sensitivity of ADXL335 at Vs = 3V (mV/g) - Assuming typical
float SENSITIVITY = 300.0;  
  // Arduino ADC reference voltage (mV)
const float V_REF = 5000.0;       
  // Recalibrated zero-g voltages based on your readings (mV)
float V_ZERO_G_X = 1074.0;  // Adjusted from -1.42 g reading
float V_ZERO_G_Y = 1065.0;  // Adjusted from -1.45 g reading
float V_ZERO_G_Z = 1290.0;  // Adjusted from -0.70 g reading
  // ADC resolution (bits)
const int ADC_RESOLUTION = 1024;
  // Tolerance for static check (g)
const float STATIC_TOLERANCE = 0.2;

  // Define baselines
float xBaseline = 0, yBaseline = 0, zBaseline = 0;
  // Setup initial values for variables
int stepCount = 0;
bool stepDetected = false;
float previousAcceleration = 0;

// ADXL335 Self-Test Routine with Recalibrated Zero-g and Flat Orientation
#define X_PIN A0    // X-axis output
#define Y_PIN A1    // Y-axis output
#define Z_PIN A2    // Z-axis output
#define ST_PIN 2    // Self-test pin

void setup() {
  Serial.begin(9600);

  // ST Pin initial state; high signal provides 5V to MOSFET gate
  pinMode(ST_PIN, OUTPUT);
  digitalWrite(ST_PIN, HIGH);

  // Initialise arduino pins for ADXL readings
  digitalWrite(X_PIN,INPUT);
  digitalWrite(Y_PIN,INPUT);
  digitalWrite(Z_PIN,INPUT);
}

void loop() {


}

float readAcceleration(int pin, float vZeroG) {
  int rawValue = analogRead(pin);
  float voltage = (rawValue * V_REF) / (ADC_RESOLUTION - 1);
  float acceleration = (voltage - vZeroG) / SENSITIVITY;
  Serial.print("Pin A"); Serial.print(pin - A0); // A0=0, A1=1, A2=2
  Serial.print(": Raw="); Serial.print(rawValue);
  Serial.print(", Voltage="); Serial.print(voltage, 0); Serial.print(" mV");
  Serial.print(", Accel="); Serial.print(acceleration, 2); Serial.println(" g");
  return acceleration;
}

bool isStatic(float x, float y, float z) {
  float expectedX = 0.0; // Flat: no gravity
  float expectedY = 0.0;
  float expectedZ = 0.0;
  return (abs(x - expectedX) <= STATIC_TOLERANCE &&
          abs(y - expectedY) <= STATIC_TOLERANCE &&
          abs(z - expectedZ) <= STATIC_TOLERANCE);
}

void printResults(float x, float y, float z) {
  Serial.print("X: "); Serial.print(x, 2); Serial.print(" g");
  Serial.print(" | Y: "); Serial.print(y, 2); Serial.print(" g");
  Serial.print(" | Z: "); Serial.print(z, 2); Serial.println(" g");
}

// Function to compare measured g-differences and voltages with datasheet ranges
void compareGValues(float xDiffG, float yDiffG, float zDiffG, float xDiffmV, float yDiffmV, float zDiffmV) {
  const float X_MIN_G = -0.5;    const float X_MAX_G = -2.0;    const float X_TYP_G = -1.08;
  const float X_MIN_mV = -150.0; const float X_MAX_mV = -600.0; const float X_TYP_mV = -325.0;
  const float Y_MIN_G = 0.5;     const float Y_MAX_G = 2.0;     const float Y_TYP_G = 1.08;
  const float Y_MIN_mV = 150.0;  const float Y_MAX_mV = 600.0;  const float Y_TYP_mV = 325.0;
  const float Z_MIN_G = 0.5;     const float Z_MAX_G = 3.33;    const float Z_TYP_G = 1.83;
  const float Z_MIN_mV = 150.0;  const float Z_MAX_mV = 1000.0; const float Z_TYP_mV = 550.0;
  
  Serial.println("Self-Test Verification (Min/Typ/Max):");
  
  Serial.print("X-axis: ");
  if (xDiffG >= X_MAX_G && xDiffG <= X_MIN_G && xDiffmV >= X_MAX_mV && xDiffmV <= X_MIN_mV) {
    Serial.print("PASS ("); Serial.print(xDiffG, 2); Serial.print(" g, "); Serial.print(xDiffmV, 0);
    Serial.print(" mV, Range: "); Serial.print(X_MAX_G, 2); Serial.print(" to "); Serial.print(X_MIN_G, 2);
    Serial.print(" g, "); Serial.print(X_MAX_mV, 0); Serial.print(" to "); Serial.print(X_MIN_mV, 0);
    Serial.println(" mV)");
  } else {
    Serial.print("FAIL ("); Serial.print(xDiffG, 2); Serial.print(" g, "); Serial.print(xDiffmV, 0);
    Serial.print(" mV, Expected: "); Serial.print(X_MAX_G, 2); Serial.print(" to "); Serial.print(X_MIN_G, 2);
    Serial.print(" g, "); Serial.print(X_MAX_mV, 0); Serial.print(" to "); Serial.print(X_MIN_mV, 0);
    Serial.print(" mV, Typical: "); Serial.print(X_TYP_G, 2); Serial.print(" g, "); Serial.print(X_TYP_mV, 0);
    Serial.println(" mV)");
  }
  
  Serial.print("Y-axis: ");
  if (yDiffG >= Y_MIN_G && yDiffG <= Y_MAX_G && yDiffmV >= Y_MIN_mV && yDiffmV <= Y_MAX_mV) {
    Serial.print("PASS ("); Serial.print(yDiffG, 2); Serial.print(" g, "); Serial.print(yDiffmV, 0);
    Serial.print(" mV, Range: "); Serial.print(Y_MIN_G, 2); Serial.print(" to "); Serial.print(Y_MAX_G, 2);
    Serial.print(" g, "); Serial.print(Y_MIN_mV, 0); Serial.print(" to "); Serial.print(Y_MAX_mV, 0);
    Serial.println(" mV)");
  } else {
    Serial.print("FAIL ("); Serial.print(yDiffG, 2); Serial.print(" g, "); Serial.print(yDiffmV, 0);
    Serial.print(" mV, Expected: "); Serial.print(Y_MIN_G, 2); Serial.print(" to "); Serial.print(Y_MAX_G, 2);
    Serial.print(" g, "); Serial.print(Y_MIN_mV, 0); Serial.print(" to "); Serial.print(Y_MAX_mV, 0);
    Serial.print(" mV, Typical: "); Serial.print(Y_TYP_G, 2); Serial.print(" g, "); Serial.print(Y_TYP_mV, 0);
    Serial.println(" mV)");
  }
  
  Serial.print("Z-axis: ");
  if (zDiffG >= Z_MIN_G && zDiffG <= Z_MAX_G && zDiffmV >= Z_MIN_mV && zDiffmV <= Z_MAX_mV) {
    Serial.print("PASS ("); Serial.print(zDiffG, 2); Serial.print(" g, "); Serial.print(zDiffmV, 0);
    Serial.print(" mV, Range: "); Serial.print(Z_MIN_G, 2); Serial.print(" to "); Serial.print(Z_MAX_G, 2);
    Serial.print(" g, "); Serial.print(Z_MIN_mV, 0); Serial.print(" to "); Serial.print(Z_MAX_mV, 0);
    Serial.println(" mV)");
  } else {
    Serial.print("FAIL ("); Serial.print(zDiffG, 2); Serial.print(" g, "); Serial.print(zDiffmV, 0);
    Serial.print(" mV, Expected: "); Serial.print(Z_MIN_G, 2); Serial.print(" to "); Serial.print(Z_MAX_G, 2);
    Serial.print(" g, "); Serial.print(Z_MIN_mV, 0); Serial.print(" to "); Serial.print(Z_MAX_mV, 0);
    Serial.print(" mV, Typical: "); Serial.print(Z_TYP_G, 2); Serial.print(" g, "); Serial.print(Z_TYP_mV, 0);
    Serial.println(" mV)");
  }
  Serial.println("------------------------");
}
