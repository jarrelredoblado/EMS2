#include <LiquidCrystal_I2C.h>

// LCD Initialization (16x2) with I2C address 0x27
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Define Pins
#define X_PIN A0
#define Y_PIN A1
#define Z_PIN A2
#define BUTTON_PIN 4
#define ST_PIN 5  // Self-Test Pin

// Calibration Data Structure
struct CalibrationData {
    float xPlus, xMinus;
    float yPlus, yMinus;
    float zPlus, zMinus;
} calData;

bool key = false;
long X_calib = 0, Y_calib = 0, Z_calib = 0;
const int numReadings = 50;

void displayLCD(String line1, String line2) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(line1);
    lcd.setCursor(0, 1);
    lcd.print(line2);
}

float readAxisAverage(int pin) {
    long sum = 0;
    for (int i = 0; i < numReadings; i++) {
        sum += analogRead(pin);
        delay(1);
    }
    return (float)sum / numReadings;
}

bool selfTestAccelerometer() {
    displayLCD("Self-Test", "Running...");
    delay(1000);

    digitalWrite(ST_PIN, HIGH); // Enable self-test
    delay(500);
    
    float xTest = readAxisAverage(X_PIN);
    float yTest = readAxisAverage(Y_PIN);
    float zTest = readAxisAverage(Z_PIN);
    
    digitalWrite(ST_PIN, LOW); // Disable self-test

    bool testPass = abs(xTest - (-0.325)) < 0.1 &&
                    abs(yTest - (0.325)) < 0.1 &&
                    abs(zTest - (0.550)) < 0.1;

    if (testPass) {
        displayLCD("Self-Test", "Passed");
        delay(2000);
        return true;
    } else {
        displayLCD("Self-Test", "Failed");
        delay(2000);
        return false;
    }
}

void waitForButtonPress() {
    while (digitalRead(BUTTON_PIN) == HIGH);
    delay(300);
    while (digitalRead(BUTTON_PIN) == LOW);
    delay(300);
}

void selfTest() {
    if (!selfTestAccelerometer()) {
      displayLCD("Self-Test", "Check Sensor!");
      while (1); // Stop execution if self-test fails
    }
}

void calibrateAccelerometer() {
    displayLCD("Calibration", "Press Button");
    waitForButtonPress();

    String orientations[6] = {"-X", "+X", "-Y", "+Y", "-Z", "+Z"};
    float readings[6];

    for (int i = 0; i < 6; i++) {
        displayLCD("Calibrating", orientations[i] + " Axis");
        waitForButtonPress();
        readings[i] = readAxisAverage(i % 2 == 0 ? X_PIN : (i < 4 ? Y_PIN : Z_PIN));
        displayLCD(orientations[i] + " Offset", "Set to 0");
        waitForButtonPress();
    }

    calData.xMinus = readings[0];
    calData.xPlus = readings[1];
    calData.yMinus = readings[2];
    calData.yPlus = readings[3];
    calData.zMinus = readings[4];
    calData.zPlus = readings[5];

    displayLCD("Calibration", "Complete");
    delay(2000);
}

void displayAccelerometerValues() {
    float x_acc = ((analogRead(X_PIN) - (calData.xPlus + calData.xMinus) / 2) * 9.81) / 330.0;
    float y_acc = ((analogRead(Y_PIN) - (calData.yPlus + calData.yMinus) / 2) * 9.81) / 330.0;
    float z_acc = ((analogRead(Z_PIN) - (calData.zPlus + calData.zMinus) / 2) * 9.81) / 330.0;

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("X: "); lcd.print(x_acc, 2);
    lcd.setCursor(8, 0);
    lcd.print("Y: "); lcd.print(y_acc, 2);
    lcd.setCursor(0, 1);
    lcd.print("Z: "); lcd.print(z_acc, 2);
    delay(100);
}

void setup() {
    Serial.begin(9600);
    lcd.init();
    lcd.backlight();
    pinMode(BUTTON_PIN, INPUT_PULLUP);
    pinMode(ST_PIN, OUTPUT);
    selfTest();
    calibrateAccelerometer();
}

void loop() {
    displayAccelerometerValues();
}
